// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var ReasonApollo = require("reason-apollo/src/ReasonApollo.bs.js");

function ste(prim) {
  return prim;
}

var ppx_printed_query = "query listQuestions  {\nquestion(order_by: {created_at: desc})  {\nid  \nbody  \ncreated_at  \nvotes  {\ncc_user  {\nname  \nid  \n}\n\n}\n\n}\n\n}\n";

function parse(value) {
  var match = Js_json.decodeObject(value);
  if (match !== undefined) {
    var match$1 = Js_dict.get(Caml_option.valFromOption(match), "question");
    var tmp;
    if (match$1 !== undefined) {
      var value$1 = Caml_option.valFromOption(match$1);
      var match$2 = Js_json.decodeArray(value$1);
      tmp = match$2 !== undefined ? match$2.map((function (value) {
                var match = Js_json.decodeObject(value);
                if (match !== undefined) {
                  var value$1 = Caml_option.valFromOption(match);
                  var match$1 = Js_dict.get(value$1, "id");
                  var match$2 = Js_dict.get(value$1, "body");
                  var tmp;
                  if (match$2 !== undefined) {
                    var value$2 = Caml_option.valFromOption(match$2);
                    var match$3 = Js_json.decodeString(value$2);
                    tmp = match$3 !== undefined ? match$3 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$2));
                  } else {
                    tmp = Js_exn.raiseError("graphql_ppx: Field body on type question is missing");
                  }
                  var match$4 = Js_dict.get(value$1, "created_at");
                  var match$5 = Js_dict.get(value$1, "votes");
                  var tmp$1;
                  if (match$5 !== undefined) {
                    var value$3 = Caml_option.valFromOption(match$5);
                    var match$6 = Js_json.decodeArray(value$3);
                    tmp$1 = match$6 !== undefined ? match$6.map((function (value) {
                              var match = Js_json.decodeObject(value);
                              if (match !== undefined) {
                                var match$1 = Js_dict.get(Caml_option.valFromOption(match), "cc_user");
                                var tmp;
                                if (match$1 !== undefined) {
                                  var match$2 = Js_json.decodeObject(Caml_option.valFromOption(match$1));
                                  if (match$2 !== undefined) {
                                    var value$1 = Caml_option.valFromOption(match$2);
                                    var match$3 = Js_dict.get(value$1, "name");
                                    var tmp$1;
                                    if (match$3 !== undefined) {
                                      var value$2 = Caml_option.valFromOption(match$3);
                                      var match$4 = Js_json.decodeString(value$2);
                                      tmp$1 = match$4 !== undefined ? match$4 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$2));
                                    } else {
                                      tmp$1 = Js_exn.raiseError("graphql_ppx: Field name on type cc_user is missing");
                                    }
                                    var match$5 = Js_dict.get(value$1, "id");
                                    tmp = {
                                      name: tmp$1,
                                      id: match$5 !== undefined ? Caml_option.valFromOption(match$5) : Js_exn.raiseError("graphql_ppx: Field id on type cc_user is missing")
                                    };
                                  } else {
                                    tmp = Js_exn.raiseError("graphql_ppx: Object is not a value");
                                  }
                                } else {
                                  tmp = Js_exn.raiseError("graphql_ppx: Field cc_user on type vote is missing");
                                }
                                return {
                                        cc_user: tmp
                                      };
                              } else {
                                return Js_exn.raiseError("graphql_ppx: Object is not a value");
                              }
                            })) : Js_exn.raiseError("graphql_ppx: Expected array, got " + JSON.stringify(value$3));
                  } else {
                    tmp$1 = Js_exn.raiseError("graphql_ppx: Field votes on type question is missing");
                  }
                  return {
                          id: match$1 !== undefined ? Caml_option.valFromOption(match$1) : Js_exn.raiseError("graphql_ppx: Field id on type question is missing"),
                          body: tmp,
                          created_at: match$4 !== undefined ? Caml_option.valFromOption(match$4) : Js_exn.raiseError("graphql_ppx: Field created_at on type question is missing"),
                          votes: tmp$1
                        };
                } else {
                  return Js_exn.raiseError("graphql_ppx: Object is not a value");
                }
              })) : Js_exn.raiseError("graphql_ppx: Expected array, got " + JSON.stringify(value$1));
    } else {
      tmp = Js_exn.raiseError("graphql_ppx: Field question on type query_root is missing");
    }
    return {
            question: tmp
          };
  } else {
    return Js_exn.raiseError("graphql_ppx: Object is not a value");
  }
}

function make(param) {
  return {
          query: ppx_printed_query,
          variables: null,
          parse: parse
        };
}

function makeWithVariables(param) {
  return {
          query: ppx_printed_query,
          variables: null,
          parse: parse
        };
}

function ret_type(f) {
  return /* module */[];
}

var MT_Ret = /* module */[];

var GetAllUsers = /* module */[
  /* ppx_printed_query */ppx_printed_query,
  /* query */ppx_printed_query,
  /* parse */parse,
  /* make */make,
  /* makeWithVariables */makeWithVariables,
  /* ret_type */ret_type,
  /* MT_Ret */MT_Ret
];

var GetAllUsersQuery = ReasonApollo.CreateSubscription([
      ppx_printed_query,
      parse
    ]);

var component = ReasonReact.statelessComponent("Questions");

function make$1(_children) {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (_self) {
              return ReasonReact.element(undefined, undefined, Curry._2(GetAllUsersQuery[/* make */3], undefined, (function (param) {
                                var result = param[/* result */0];
                                var tmp;
                                if (typeof result === "number") {
                                  tmp = "Loading";
                                } else if (result.tag) {
                                  tmp = React.createElement("div", undefined, $$Array.mapi((function (index, question) {
                                              var id = question.id;
                                              return React.createElement("div", {
                                                          key: String(index)
                                                        }, question.body, React.createElement("br", undefined), React.createElement("p", undefined, "ID: " + Belt_Option.getWithDefault(Caml_option.undefined_to_opt(JSON.stringify(id)), "No id")));
                                            }), result[0].question));
                                } else {
                                  console.log(result[0]);
                                  tmp = "Something Went Wrong";
                                }
                                return React.createElement("div", undefined, React.createElement("h1", undefined, "Questions: "), tmp);
                              })));
            }),
          /* initialState */component[/* initialState */10],
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */component[/* reducer */12],
          /* jsElementWrapped */component[/* jsElementWrapped */13]
        ];
}

exports.ste = ste;
exports.GetAllUsers = GetAllUsers;
exports.GetAllUsersQuery = GetAllUsersQuery;
exports.component = component;
exports.make = make$1;
/* GetAllUsersQuery Not a pure module */
