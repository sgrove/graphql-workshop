// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var ReasonApollo = require("reason-apollo/src/ReasonApollo.bs.js");
var QuestionVoter$ReactTemplate = require("./QuestionVoter.bs.js");

function ste(prim) {
  return prim;
}

var ppx_printed_query = "subscription listQuestions  {\nquestion(order_by: {created_at: desc})  {\nid  \nbody  \ncreated_at  \nvotes_aggregate  {\naggregate  {\ncount(columns: created_at, distinct: true)  \n}\n\n}\n\n}\n\n}\n";

function parse(value) {
  var match = Js_json.decodeObject(value);
  if (match !== undefined) {
    var match$1 = Js_dict.get(Caml_option.valFromOption(match), "question");
    var tmp;
    if (match$1 !== undefined) {
      var value$1 = Caml_option.valFromOption(match$1);
      var match$2 = Js_json.decodeArray(value$1);
      tmp = match$2 !== undefined ? match$2.map((function (value) {
                var match = Js_json.decodeObject(value);
                if (match !== undefined) {
                  var value$1 = Caml_option.valFromOption(match);
                  var match$1 = Js_dict.get(value$1, "id");
                  var match$2 = Js_dict.get(value$1, "body");
                  var tmp;
                  if (match$2 !== undefined) {
                    var value$2 = Caml_option.valFromOption(match$2);
                    var match$3 = Js_json.decodeString(value$2);
                    tmp = match$3 !== undefined ? match$3 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$2));
                  } else {
                    tmp = Js_exn.raiseError("graphql_ppx: Field body on type question is missing");
                  }
                  var match$4 = Js_dict.get(value$1, "created_at");
                  var match$5 = Js_dict.get(value$1, "votes_aggregate");
                  var tmp$1;
                  if (match$5 !== undefined) {
                    var match$6 = Js_json.decodeObject(Caml_option.valFromOption(match$5));
                    if (match$6 !== undefined) {
                      var match$7 = Js_dict.get(Caml_option.valFromOption(match$6), "aggregate");
                      var tmp$2;
                      if (match$7 !== undefined) {
                        var value$3 = Caml_option.valFromOption(match$7);
                        var match$8 = Js_json.decodeNull(value$3);
                        if (match$8 !== undefined) {
                          tmp$2 = undefined;
                        } else {
                          var match$9 = Js_json.decodeObject(value$3);
                          var tmp$3;
                          if (match$9 !== undefined) {
                            var match$10 = Js_dict.get(Caml_option.valFromOption(match$9), "count");
                            var tmp$4;
                            if (match$10 !== undefined) {
                              var value$4 = Caml_option.valFromOption(match$10);
                              var match$11 = Js_json.decodeNull(value$4);
                              if (match$11 !== undefined) {
                                tmp$4 = undefined;
                              } else {
                                var match$12 = Js_json.decodeNumber(value$4);
                                tmp$4 = match$12 !== undefined ? match$12 | 0 : Js_exn.raiseError("graphql_ppx: Expected int, got " + JSON.stringify(value$4));
                              }
                            } else {
                              tmp$4 = undefined;
                            }
                            tmp$3 = {
                              count: tmp$4
                            };
                          } else {
                            tmp$3 = Js_exn.raiseError("graphql_ppx: Object is not a value");
                          }
                          tmp$2 = Caml_option.some(tmp$3);
                        }
                      } else {
                        tmp$2 = undefined;
                      }
                      tmp$1 = {
                        aggregate: tmp$2
                      };
                    } else {
                      tmp$1 = Js_exn.raiseError("graphql_ppx: Object is not a value");
                    }
                  } else {
                    tmp$1 = Js_exn.raiseError("graphql_ppx: Field votes_aggregate on type question is missing");
                  }
                  return {
                          id: match$1 !== undefined ? Caml_option.valFromOption(match$1) : Js_exn.raiseError("graphql_ppx: Field id on type question is missing"),
                          body: tmp,
                          created_at: match$4 !== undefined ? Caml_option.valFromOption(match$4) : Js_exn.raiseError("graphql_ppx: Field created_at on type question is missing"),
                          votes_aggregate: tmp$1
                        };
                } else {
                  return Js_exn.raiseError("graphql_ppx: Object is not a value");
                }
              })) : Js_exn.raiseError("graphql_ppx: Expected array, got " + JSON.stringify(value$1));
    } else {
      tmp = Js_exn.raiseError("graphql_ppx: Field question on type subscription_root is missing");
    }
    return {
            question: tmp
          };
  } else {
    return Js_exn.raiseError("graphql_ppx: Object is not a value");
  }
}

function make(param) {
  return {
          query: ppx_printed_query,
          variables: null,
          parse: parse
        };
}

function makeWithVariables(param) {
  return {
          query: ppx_printed_query,
          variables: null,
          parse: parse
        };
}

function ret_type(f) {
  return /* module */[];
}

var MT_Ret = /* module */[];

var ListQuestions = /* module */[
  /* ppx_printed_query */ppx_printed_query,
  /* query */ppx_printed_query,
  /* parse */parse,
  /* make */make,
  /* makeWithVariables */makeWithVariables,
  /* ret_type */ret_type,
  /* MT_Ret */MT_Ret
];

var ListQuestionsQuery = ReasonApollo.CreateSubscription([
      ppx_printed_query,
      parse
    ]);

var component = ReasonReact.statelessComponent("Questions");

function questionScore(question) {
  var match = question.votes_aggregate.aggregate;
  return Belt_Option.getWithDefault(match !== undefined ? Caml_option.valFromOption(match).count : undefined, 0);
}

function make$1(_children) {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (_self) {
              return ReasonReact.element(undefined, undefined, Curry._2(ListQuestionsQuery[/* make */3], undefined, (function (param) {
                                var result = param[/* result */0];
                                var tmp;
                                if (typeof result === "number") {
                                  tmp = "Loading";
                                } else if (result.tag) {
                                  tmp = React.createElement("div", undefined, $$Array.of_list(List.mapi((function (index, question) {
                                                  var id = question.id;
                                                  return React.createElement("div", {
                                                              key: String(index)
                                                            }, ReasonReact.element(undefined, undefined, QuestionVoter$ReactTemplate.make(id, /* array */[])), React.createElement("span", undefined, String(index + 1 | 0) + (". " + question.body)), React.createElement("span", undefined, React.createElement("small", undefined, "  [" + (String(questionScore(question)) + (" points" + "]")))));
                                                }), List.sort((function (a, b) {
                                                      return questionScore(b) - questionScore(a) | 0;
                                                    }), $$Array.to_list(result[0].question)))));
                                } else {
                                  console.log(result[0]);
                                  tmp = "Something Went Wrong";
                                }
                                return React.createElement("div", undefined, React.createElement("h1", undefined, "Questions: "), tmp);
                              })));
            }),
          /* initialState */component[/* initialState */10],
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */component[/* reducer */12],
          /* jsElementWrapped */component[/* jsElementWrapped */13]
        ];
}

exports.ste = ste;
exports.ListQuestions = ListQuestions;
exports.ListQuestionsQuery = ListQuestionsQuery;
exports.component = component;
exports.questionScore = questionScore;
exports.make = make$1;
/* ListQuestionsQuery Not a pure module */
